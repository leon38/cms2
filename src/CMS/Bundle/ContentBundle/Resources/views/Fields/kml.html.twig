<div class="widget widget-itineraire">
    <h4 class="widget-title">Itin√©raire</h4>
    <div id="map"></div>
</div>
<div class="widget widget-profil">
    <h4 class="widget-title">Profil</h4>
    <canvas id="profil"></canvas>
</div>
{% if value.data is defined and value.data %}
<script>
    var map;
    function initMap() {
        geocoder = new google.maps.Geocoder();
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 13
        });
        var curLatLong = "";
        var prevLatLong = new google.maps.LatLng({{ value.data.0.latitude }}, {{ value.data.0.longitude }});
        var bounds = new google.maps.LatLngBounds();
        {% for point in value.data %}
            {% if loop.index > 0 and point.latitude is defined and point.longitude is defined and point.speed_percent is defined %}
                var strokeColor = rgbify({{ value.data.max_speed }}, {{ value.data.min_speed }}, {{ point.speed_percent }}, true );
                var p = new google.maps.LatLng({{ point.latitude }}, {{ point.longitude }});
                curLatLong = p;
                var poly = new google.maps.Polyline({
                    // use your own style here
                    path: [prevLatLong, curLatLong],
                    strokeColor: strokeColor,
                    strokeOpacity: 1.0,
                    strokeWeight: 4
                });
                prevLatLong = curLatLong;
                bounds.extend(p);
                poly.setMap(map);
            {% endif %}
        {% endfor %}

        // fit bounds to track
        map.fitBounds(bounds);
    }

    function rgbify(maxval, minval, val, moreisgood) {
        var intnsty = (val - minval) / (maxval - minval);
        var r, b;
        if (moreisgood) {
            if (intnsty > 0.5) {
                b = 255;
                r = Math.round(2 * (1 - intnsty) * 255);
            } else {
                r = 255;
                b = Math.round(2 * intnsty * 255);
            }

        } else { //lessisgood
            if (intnsty > 0.5) {
                r = 255;
                b = Math.round(2 * (1 - intnsty) * 255);
            } else {
                b = 255;
                r = Math.round(2 * intnsty * 255);
            }
        }
        return "rgb(" + r.toString() + ", 0, " + b.toString() + ")";
    }


    var data = {
        labels: ['{{ value.labels|join("','")|raw }}'],
        datasets: [
            {
                label: "Altitude (en m)",
                fill: true,
                backgroundColor: "rgba(237, 54, 77, 0.5)",
                borderWidth: 2,
                borderColor: "rgba(237, 54, 77, 1)",
                pointBorderWidth: 0,
                pointBorderColor: "rgba(237, 54, 77, 0)",
                pointBackgroundColor: "rgba(237, 54, 77, 0)",
                data: [{% for altitude in value.altitudes %}{{ altitude }}{% if not loop.last %},{% endif %}{% endfor %}]
            }
        ]
    };
    $(document).ready(function() {
        new Chart($('#profil'), {
            type: 'line',
            data: data,
            animation:{
                animateScale:true
            }
        });
    })
</script>

{% endif %}