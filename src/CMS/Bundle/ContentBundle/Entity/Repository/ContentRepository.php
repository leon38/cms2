<?php

namespace CMS\Bundle\ContentBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ContentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentRepository extends EntityRepository
{
    
    public function findByQuery($conditions = array(), $orders = array(), $nb_element = 0, $offset = 0)
    {
        $query = $this->_em
            ->createQueryBuilder('c')
            ->select('c')
            ->from('ContentBundle:Content', 'c');
        if (!empty($conditions)) {
            $i = 0;
            foreach($conditions as $col => $value) {
                if ($i == 0) {
                    $query = $query->where('c.'.$col.' = :'.$col)
                        ->setParameter($col, $value);
                } else {
                    $query = $query->andWhere('c.'.$col.' = :'.$col)
                        ->setParameter($col, $value);
                }
                $i++;
            }
        }
        if(!empty($order)) {
            $i = 0;
            foreach($orders as $col => $sens) {
                if ($i == 0) {
                    $query = $query->orderBy('c.'.$col, $sens);
                } else {
                    $query = $query->addOrderBy('c.'.$col, $sens);
                }
                $i++;
            }
        }
        if ($offset != 0)
            $query = $query->setFirstResult($offset);
        if ($nb_element != 0)
            $query = $query->setMaxResults($nb_element);
        return $query;
    }
    
    public function getAllContentsPublished()
    {
        return $this->_em
            ->createQueryBuilder('c, u, cat')
            ->select('c, u, cat')
            ->from('ContentBundle:Content', 'c')
            ->join('c.author', 'u')
            ->join('c.categories', 'cat')
            ->where('c.published = 1')
            ->getQuery()
            ->getResult();
        
    }
    
    public function getAllContents($cat)
    {
        $temp_children = $cat->getChildren();
        $children = array();
        foreach ($temp_children as $child) {
            $children[] = $child->getId();
        }
        
        return $this->_em
            ->createQueryBuilder('co')
            ->select('co')
            ->from('ContentBundle:Content', 'co')
            ->join('co.categories', 'c')
            ->where('c.id = :cat_id')
            ->orWhere('c.id IN (:cats)')
            ->andWhere('co.published = 1')
            ->setParameter('cat_id', $cat->getId())
            ->setParameter('cats', $children)
            ->orderBy('co.created', 'DESC')
            ->getQuery()
            ->getResult();
        
    }
    
    public function getCountByTaxonomy()
    {
        return $this->_em
            ->createQueryBuilder('c')
            ->select('COUNT(c) as total, t.title')
            ->from('ContentBundle:Content', 'c')
            ->leftJoin('c.taxonomy', 't')
            ->groupBy('c.taxonomy')
            ->having('total > 0')
            ->getQuery()
            ->getResult();
    }
    
    public function getCountByMonth()
    {
        return $this->_em
            ->createQueryBuilder('c')
            ->select('COUNT(c) as total, YEAR(c.created) as year_created, MONTH(c.created) as month_created')
            ->from('ContentBundle:Content', 'c')
            ->groupBy('year_created, month_created')
            ->getQuery()
            ->getResult();
    }
    
    
    public function getValuesByMonth($taxonomy, $title_field)
    {
        return $this->_em
            ->createQueryBuilder('c')
            ->select('fv.value as total, YEAR(c.created) as year_created, MONTH(c.created) as month_created')
            ->from('ContentBundle:Content', 'c')
            ->leftJoin('c.taxonomy', 't', 't.id = '.$taxonomy->getId())
            ->leftJoin('c.fieldvalues', 'fv')
            ->leftJoin('fv.field', 'f')
            ->where('f.title = :title_field')
            ->setParameter('title_field', $title_field)
            ->orderBy('c.created', 'ASC')
            ->getQuery()
            ->getResult();
    }
    
    
    public function getRelatedPosts($id_post, $limit)
    {
        $categories = $this->_em
            ->createQueryBuilder()
            ->select('cat.id')
            ->from('ContentBundle:Category', 'cat')
            ->leftJoin('cat.contents', 'c')
            ->where('c.id = :id')
            ->setParameter('id', $id_post)
            ->getQuery()
            ->getScalarResult();
        
        return $this->_em
            ->createQueryBuilder()
            ->select('c')
            ->from('ContentBundle:Content', 'c')
            ->leftJoin('c.categories', 'cat')
            ->where('cat.id IN (:ids)')
            ->setParameter('ids', $categories)
            ->andWhere('c.id != :id')
            ->setParameter('id', $id_post)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }
    
    
    public function search($query)
    {
        return $this->_em
            ->createQueryBuilder()
            ->select('c')
            ->from('ContentBundle:Content', 'c')
            ->where('c.title LIKE :query')
            ->orWhere('c.description LIKE :query')
            ->setParameter('query', '%'.$query.'%')
            ->getQuery()
            ->getResult();
    }
    
}
